* make-package.nix

This is a Nix function for creating packages in Nix. It combines
‘stdenv.mkDerivation’ and ‘callPackage’ from Nixpkgs. By breaking
compatibility with these functions, we can create packages with much
more structure, and robustness than provided by stdenv.mkDerivation
and callPackage.

For example, a flake for Nix would look like:

#+BEGIN_SRC nix
{
  description = "The purely functional package manager";

  inputs.nixpkgs.url = "nixpkgs/nixos-20.03-small";
  inputs.make-package.url = "git://github.com/matthewbauer/make-package.nix";

  outputs = { self, nixpkgs, make-package }:

    let

      version = builtins.readFile ./.version + versionSuffix;
      versionSuffix =
        if officialRelease
        then ""
        else "pre${builtins.substring 0 8 (self.lastModifiedDate or self.lastModified)}_${self.shortRev or "dirty"}";

      officialRelease = false;

      systems = [ "x86_64-linux" "i686-linux" "x86_64-darwin" "aarch64-linux" ];

      forAllSystems = f: nixpkgs.lib.genAttrs systems (system: f system);

      # Memoize nixpkgs for different platforms for efficiency.
      nixpkgsFor = forAllSystems (system:
        import nixpkgs {
          inherit system;
          overlays = [ self.overlay ];
        }
      );

    in {

      # A Nixpkgs overlay that overrides the 'nix' and
      # 'nix.perl-bindings' packages.
      overlay = final: prev: {

        nix = make-package.makePackage prev ({ stdenv, ... }: rec {
          pname = "nix";
          version = "2.4pre20200622_334e26b";

          outputs = [ "out" "dev" "man" "doc" ];

          depsBuildHost = [
            "pkgconfig"
            "autoreconfHook"
            "autoconf-archive"
            "bison"
            "flex"
            "libxml2"
            "libxslt"
            "docbook5"
            "docbook_xsl_ns"
            "jq"
          ];
          depsHostTarget = [
            "curl"
            "openssl"
            "sqlite"
            "xz"
            "bzip2"
            "nlohmann_json"
            "brotli"
            "boost"
            "editline"
            "libsodium"
            "libarchive"
            "gtest"
          ] ++ stdenv.lib.optional stdenv.hostPlatform.isLinux "libseccomp";
          depsHostTargetPropagated = [ "boehmgc" ];

          src = self;

          configureFlags = [
            "--with-store-dir=/nix/store"
            "--localstatedir=/nix/"
            "--sysconfdir=/etc"
            "--disable-init-state"
            "--enable-gc"
            "--with-system=${stdenv.hostPlatform.system}"
          ];

          makeFlags = [ "profiledir=${placeholder "out"}/etc/profile.d" ];

          installFlags = [ "sysconfdir=${placeholder "out"}/etc" ];
        });

      };

      packages = forAllSystems (system: {
        inherit (nixpkgsFor.${system}) nix;
      });

      defaultPackage = forAllSystems (system: self.packages.${system}.nix);

  };
}
#+END_SRC
