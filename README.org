* make-package.nix

This is a Nix function for creating packages in Nix. It combines
‘stdenv.mkDerivation’ and ‘callPackage’ from Nixpkgs. By breaking
compatibility with these functions, we can create packages with much
more structure, and robustness than provided by stdenv.mkDerivation
and callPackage.

** Differences from stdenv.mkDerivation

- arguments to makePackage are checked, so you get an error if you
  misspell one; additional variables to the derivation need to be
  passed via “environment” (should be used sparingly)
- strictDeps is enabled by default; if you don’t know what that is,
  “buildInputs” should be sufficient for your use case
- “native” build inputs are automatically put into
  “disallowedReferences” since they should not appear in the output.
- custom phases like buildCommand, unpackPhase, buildPhase, etc. are
  disallowed; new phases should be defined in reusable “setup hooks”
- check phase is enabled by default
- separate debug info is enabled by default
- installCheck and dist phases are removed; these should be done in a
  separate derivation

Eventually, I would like to enable “__structuredAttrs” as well, but
that requires changes to Nixpkgs
(https://github.com/NixOS/nixpkgs/pull/85042).

** Differences from callPackage

- splicing happens explicitly: the arguments passed in are always from
  pkgsHostTarget, while "deps" must be string identifiers

** Example

For example, a flake for Nix would look like:

#+BEGIN_SRC nix
{
  description = "The purely functional package manager";

  inputs.nixpkgs.url = "nixpkgs/nixos-20.03-small";
  inputs.make-package.url = "git://github.com/matthewbauer/make-package.nix";

  outputs = { self, nixpkgs, make-package }: let
    flattenAttrs = f: builtins.listToAttrs (nixpkgs.lib.flatten (
      map (n:
        map (n': { name = "${n}-${n'}"; value = f.${n}.${n'}; }) (builtins.attrNames f.${n})
      ) (builtins.attrNames f)
    ));

    systems = [ "x86_64-linux" "i686-linux" "x86_64-darwin" "aarch64-linux" ];
    crossSystems = ["x86_64-linux" "aarch64-linux"];

    forAllSystems = f: nixpkgs.lib.genAttrs systems (system: f system);

    # Memoize nixpkgs for different platforms for efficiency.
    nixpkgsFor = forAllSystems (system:
      import nixpkgs {
        inherit system;
        overlays = [ self.overlay ];
      }
    );

    nixpkgsCrossFor = forAllSystems (system: forAllSystems (crossSystem:
      import nixpkgs {
        inherit system crossSystem;
        overlays = [ self.overlay ];
      }
    ));
  in {
    overlay = final: prev: {

      nix = make-package.makePackage prev ({ stdenv, ... }: rec {
        pname = "nix";
        version = "2.4pre20200622_334e26b";

        outputs = [ "out" "dev" "man" "doc" ];

        depsBuildHost = [
          "pkgconfig"
          "autoreconfHook"
          "autoconf-archive"
          "bison"
          "flex"
          "libxml2"
          "libxslt"
          "docbook5"
          "docbook_xsl_ns"
          "jq"
        ];
        depsHostTarget = [
          "curl"
          "openssl"
          "sqlite"
          "xz"
          "bzip2"
          "nlohmann_json"
          "brotli"
          "boost"
          "editline"
          "libsodium"
          "libarchive"
          "gtest"
        ] ++ stdenv.lib.optional stdenv.hostPlatform.isLinux "libseccomp";
        depsHostTargetPropagated = [ "boehmgc" ];

        src = self;

        configureFlags = [
          "--with-store-dir=/nix/store"
          "--localstatedir=/nix/"
          "--sysconfdir=/etc"
          "--disable-init-state"
          "--enable-gc"
          "--with-system=${stdenv.hostPlatform.system}"
        ];

        makeFlags = [ "profiledir=${placeholder "out"}/etc/profile.d" ];

        installFlags = [ "sysconfdir=${placeholder "out"}/etc" ];
      });

    };

    packages = forAllSystems (system: ({
      inherit (nixpkgsFor.${system}) nix;
    } // flattenAttrs (nixpkgs.lib.genAttrs crossSystems (crossSystem: {
      inherit (nixpkgsCrossFor.${system}.${crossSystem}) nix;
    }))));

    defaultPackage = forAllSystems (system: self.packages.${system}.nix);

  };
}
#+END_SRC
